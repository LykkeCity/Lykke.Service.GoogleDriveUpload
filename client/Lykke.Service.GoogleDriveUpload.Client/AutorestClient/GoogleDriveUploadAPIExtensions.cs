// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lykke.Service.GoogleDriveUpload.Client.AutorestClient
{
    using Lykke.Service;
    using Lykke.Service.GoogleDriveUpload;
    using Lykke.Service.GoogleDriveUpload.Client;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GoogleDriveUploadAPI.
    /// </summary>
    public static partial class GoogleDriveUploadAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<FolderPath> AllFolderPaths(this IGoogleDriveUploadAPI operations)
            {
                return operations.AllFolderPathsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FolderPath>> AllFolderPathsAsync(this IGoogleDriveUploadAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AllFolderPathsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static UploadFileResponse UploadFile(this IGoogleDriveUploadAPI operations, UploadFileModel model = default(UploadFileModel))
            {
                return operations.UploadFileAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UploadFileResponse> UploadFileAsync(this IGoogleDriveUploadAPI operations, UploadFileModel model = default(UploadFileModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadFileWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// </param>
            public static IList<FilePermission> GetPermissions(this IGoogleDriveUploadAPI operations, string fileId = default(string))
            {
                return operations.GetPermissionsAsync(fileId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilePermission>> GetPermissionsAsync(this IGoogleDriveUploadAPI operations, string fileId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPermissionsWithHttpMessagesAsync(fileId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static FilePermission AddOrUpdatePermission(this IGoogleDriveUploadAPI operations, ChangePermissionModel model = default(ChangePermissionModel))
            {
                return operations.AddOrUpdatePermissionAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FilePermission> AddOrUpdatePermissionAsync(this IGoogleDriveUploadAPI operations, ChangePermissionModel model = default(ChangePermissionModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddOrUpdatePermissionWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static bool? RemovePermission(this IGoogleDriveUploadAPI operations, ChangePermissionModel model = default(ChangePermissionModel))
            {
                return operations.RemovePermissionAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> RemovePermissionAsync(this IGoogleDriveUploadAPI operations, ChangePermissionModel model = default(ChangePermissionModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemovePermissionWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IGoogleDriveUploadAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IGoogleDriveUploadAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
